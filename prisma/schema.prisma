generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ItemGroupInfo {
  hashString            String  @id @unique
  key                   String
  tag                   String
  properties            Json
  hashFields            Json    @default("{}")
  baseType              String?
  icon                  String?
  inventoryMaxStackSize Int?
  displayName           String?

  createdAtTimestamp DateTime @default(now())
  updatedAtTimestamp DateTime @default(now())

  @@index([key])
  @@index([tag])
}

model ItemGroupPValue {
  hashString               String
  league                   String   @default("NA")
  type                     String
  value                    Float
  stockRangeStartInclusive Int
  updatedAtTimestamp       DateTime
  lookbackWindowUsedHours  Int      @default(48)

  @@id([hashString, type, stockRangeStartInclusive, league])
  @@index([hashString])
  @@index([updatedAtTimestamp])
  @@index([type])
  @@index([stockRangeStartInclusive])
}

model ItemGroupPValueHourlyTimeseriesEntry {
  hashString               String
  league                   String   @default("NA")
  type                     String
  value                    Float
  stockRangeStartInclusive Int
  timestamp                DateTime

  @@id([hashString, type, stockRangeStartInclusive, timestamp, league])
  @@index([hashString])
  @@index([timestamp])
  @@index([type])
  @@index([stockRangeStartInclusive])
}

model ItemGroupPValueDailyTimeseriesEntry {
  hashString               String
  league                   String   @default("NA")
  type                     String
  value                    Float
  stockRangeStartInclusive Int
  timestamp                DateTime

  @@id([hashString, type, stockRangeStartInclusive, timestamp, league])
  @@index([hashString])
  @@index([timestamp])
  @@index([type])
  @@index([stockRangeStartInclusive])
}

model PoeLiveListing {
  publicStashId       String
  league              String
  poeProfileName      String
  listedAtTimestamp   DateTime
  itemGroupHashString String
  quantity            Int
  listedValue         Float

  @@id([publicStashId, itemGroupHashString])
  @@index([league])
  @@index([itemGroupHashString])
  @@index([publicStashId])
  @@index([listedAtTimestamp])
}

model UserProfile {
  userId                 String   @id
  opaqueKey              String   @unique
  poeProfileName         String
  createdAtTimestamp     DateTime @default(now())
  lastConnectedTimestamp DateTime @default(now())

  oAuthToken                   String?
  oAuthTokenUpdatedAtTimestamp DateTime

  discordUserId                   String?
  discordUsername                 String?
  discordUserIdUpdatedAtTimestamp DateTime?

  tftMember                   Boolean?
  tftMemberUpdatedAtTimestamp DateTime?

  patreonUserId             String?
  patreonTier               String?
  patreonUpdatedAtTimestamp DateTime?

  roles String[] @default([])

  CustomLadderGroup                   CustomLadderGroup[]
  PoeCharacter                        PoeCharacter[]
  PoeStashTab                         PoeStashTab[]
  twitchStreamerProfile               TwitchStreamerProfile?
  CharacterSnapshotRecord             CharacterSnapshotRecord[]
  AtlasPassiveTreeSnapshot            AtlasPassiveTreeSnapshot[]
  CharacterSnapshotSearchableSummary2 CharacterSnapshotSearchableSummary2[]
}

model TwitchStreamerProfile {
  userId             String      @id @unique
  profileName        String
  viewCount          Int
  lastVideoTimestamp DateTime
  updatedAtTimestamp DateTime
  UserProfile        UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model PoeStashTab {
  id          String
  userId      String
  league      String
  parent      String?
  name        String
  type        String
  index       Int
  flatIndex   Int?
  UserProfile UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, id, league])
}

model GenericParam {
  key         String @id
  valueString String
}

model PoeCharacter {
  id                              String      @id
  userId                          String
  createdAtTimestamp              DateTime    @default(now())
  lastSnapshotTimestamp           DateTime?
  name                            String
  lastLeague                      String?
  lastSnapshotHash                String?
  lastSnapshotHashUpdateTimestamp DateTime?
  UserProfile                     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model CharacterSnapshotRecord {
  id          String   @id @unique
  userId      String
  characterId String
  timestamp   DateTime
  experience  BigInt
  level       Int
  source      String

  UserProfile UserProfile? @relation(fields: [userId], references: [userId])
}

model AtlasPassiveTreeSnapshot {
  userId                  String
  league                  String
  systemSnapshotTimestamp DateTime
  createdAtTimestamp      DateTime
  hashes                  Int[]
  source                  String

  UserProfile UserProfile? @relation(fields: [userId], references: [userId])

  @@id([userId, league, systemSnapshotTimestamp])
  @@index([userId, systemSnapshotTimestamp])
  @@index([league])
  @@index([source])
}

model CharacterSnapshotSearchableSummary2 {
  userId                  String?
  poeProfileName          String?
  snapshotId              String    @unique
  createdAtTimestamp      DateTime
  systemSnapshotTimestamp DateTime?
  source                  String    @default("user")
  league                  String
  characterId             String    @id @unique
  characterClass          String
  mainSkillKey            String?
  passiveNodeKeys         String[]
  itemKeys                String[]
  life                    Int?
  name                    String?
  energyShield            Int?
  level                   Int?
  twitchProfileName       String?
  pobDps                  Int?
  totalValueChaos         Int?
  totalValueDivine        Float?
  topItems                Json[]

  UserProfile UserProfile? @relation(fields: [userId], references: [userId])

  @@index([characterId])
  @@index([createdAtTimestamp])
  @@index([mainSkillKey])
  @@index([userId])
  @@index([league])
  @@index([characterClass])
  @@index([passiveNodeKeys])
  @@index([itemKeys])
  @@index([systemSnapshotTimestamp])
  @@index([source])
  @@index([totalValueChaos])
  @@index([totalValueDivine])
  @@index([pobDps])
}

model CustomLadderGroup {
  id                 String
  ownerUserId        String
  name               String
  createdAtTimestamp DateTime
  members            Json[]
  UserProfile        UserProfile @relation(fields: [ownerUserId], references: [userId], onDelete: Cascade)

  @@id([id, ownerUserId])
}

model DiscordServiceMessageRecord {
  messageId       String @id
  guildId         String
  channelId       String
  senderDiscordId String

  timestamp DateTime

  type       String
  properties Json
}

model OneClickMessageHistory {
  messageId        String   @id
  channelId        String
  userId           String
  timestamp        DateTime
  exportType       String
  exportSubType    String?
  rateLimitExpires DateTime

  @@index([userId])
}

model StashViewSnapshotJob {
  id String @id

  timestamp DateTime
  userId    String
  status    String

  rateLimitEndTimestamp DateTime?

  @@index([userId])
}

model StashViewValueSnapshot {
  id String @id

  userId  String
  league  String
  stashId String

  timestamp DateTime
  value     Float

  @@index([userId])
}

model StashViewTabSnapshotRecord {
  userId  String
  league  String
  stashId String

  timestamp DateTime

  @@id([userId, league, stashId])
  @@index([userId])
}

model StashViewAutomaticSnapshotSettings {
  userId String
  league String

  stashIds String[]

  durationBetweenSnapshotsSeconds Int
  nextSnapshotTimestamp           DateTime

  @@id([userId, league])
}

model StashViewItemSummary {
  itemId String
  userId String
  league String

  stashId String

  x        Int
  y        Int
  quantity Int

  searchableString String

  itemGroupHashString String?
  itemGroupTag        String?

  icon String?

  iconId   String?
  category String[]

  @@id([userId, stashId, x, y])
  @@index([userId])
  @@index([stashId])
  @@index([league])
}

model TftLiveListing {
  channelId String
  messageId String

  userDiscordId   String
  userDiscordName String

  userDiscordDisplayRole      String?
  userDiscordDisplayRoleColor String?

  userDiscordHighestRole String?

  updatedAtTimestamp DateTime

  tag        String
  properties Json

  body String

  delistedAtTimestamp DateTime?

  @@id([userDiscordId, channelId])
}

model LivePricingHistoryHourEntry {
  itemGroupHashString  String
  league               String
  type                 String
  value                Float
  minQuantityInclusive Int
  timestamp            DateTime

  @@id([itemGroupHashString, league, type, minQuantityInclusive, timestamp])
  @@index([itemGroupHashString])
  @@index([timestamp])
}
